{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet LoginPageComponent = class LoginPageComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.type = \"password\";\n    this.isText = false;\n    this.eyeIcon = \"fa-eye-slash\";\n  }\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  hideShowPass() {\n    this.isText = !this.isText;\n    this.isText ? this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.type = \"text\" : this.type = \"password\";\n  }\n  onSubmit() {\n    if (this.loginForm.valid) {\n      // Send the obj to database\n    } else {\n      //throw the error using toaster and with required fields\n      this.validateAllFormsFields(this.loginForm);\n    }\n  }\n  validateAllFormsFields(formGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof FormControl) {\n        control.markAsDirty({\n          onlySelf: true\n        });\n      } else if (control instanceof FormGroup) {\n        this.validateAllFormsFields(control);\n      }\n    });\n  }\n};\nLoginPageComponent = __decorate([Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css']\n})], LoginPageComponent);\nexport { LoginPageComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAOzE,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAM7BC,YAAoBC,EAAe;IAAf,OAAE,GAAFA,EAAE;IAJtB,SAAI,GAAW,UAAU;IACzB,WAAM,GAAY,KAAK;IACvB,YAAO,GAAU,cAAc;EAI9B;EAEDC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAACP,UAAU,CAACQ,QAAQ,CAAC;MAClCC,QAAQ,EAAE,CAAC,EAAE,EAACT,UAAU,CAACQ,QAAQ;KAClC,CAAC;EAEJ;EAEAE,YAAY;IACV,IAAI,CAACC,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;IAC1B,IAAI,CAACA,MAAM,GAAI,IAAI,CAACC,OAAO,GAAG,QAAQ,GAAG,IAAI,CAACA,OAAO,GAAG,cAAc;IACtE,IAAI,CAACD,MAAM,GAAG,IAAI,CAACE,IAAI,GAAG,MAAM,GAAG,IAAI,CAACA,IAAI,GAAG,UAAU;EAG3D;EAEAC,QAAQ;IACN,IAAG,IAAI,CAACT,SAAS,CAACU,KAAK,EAAC;MACtB;IAAA,CAED,MACG;MACF;MACA,IAAI,CAACC,sBAAsB,CAAC,IAAI,CAACX,SAAS,CAAC;;EAE/C;EAEQW,sBAAsB,CAACC,SAAoB;IACjDC,MAAM,CAACC,IAAI,CAACF,SAAS,CAACG,QAAQ,CAAC,CAACC,OAAO,CAACC,KAAK,IAAE;MAC7C,MAAMC,OAAO,GAAGN,SAAS,CAACO,GAAG,CAACF,KAAK,CAAC;MACpC,IAAIC,OAAO,YAAYzB,WAAW,EAAC;QACjCyB,OAAO,CAACE,WAAW,CAAC;UAACC,QAAQ,EAAC;QAAI,CAAC,CAAC;OACrC,MAAM,IAAGH,OAAO,YAAYxB,SAAS,EAAC;QACrC,IAAI,CAACiB,sBAAsB,CAACO,OAAO,CAAC;;IAGxC,CAAC,CAAC;EACJ;CAED;AAjDYtB,kBAAkB,eAL9BJ,SAAS,CAAC;EACT8B,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACW5B,kBAAkB,CAiD9B;SAjDYA,kBAAkB","names":["Component","FormControl","FormGroup","Validators","LoginPageComponent","constructor","fb","ngOnInit","loginForm","group","username","required","password","hideShowPass","isText","eyeIcon","type","onSubmit","valid","validateAllFormsFields","formGroup","Object","keys","controls","forEach","field","control","get","markAsDirty","onlySelf","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\Sergio\\AUB\\CMPS 278\\FullStack.UI\\src\\app\\components\\login-page\\login-page.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css']\n})\nexport class LoginPageComponent implements OnInit {\n\n  type: string = \"password\"\n  isText: boolean = false;\n  eyeIcon: string =\"fa-eye-slash\";\n  loginForm!: FormGroup;\n  constructor(private fb: FormBuilder) {\n\n   }\n\n  ngOnInit(): void{\n    this.loginForm = this.fb.group({\n      username: ['',Validators.required],\n      password: ['',Validators.required]\n    })\n\n  }\n\n  hideShowPass(){\n    this.isText = !this.isText;\n    this.isText ?  this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.type = \"text\" : this.type = \"password\";\n\n\n  }\n\n  onSubmit(){\n    if(this.loginForm.valid){\n      // Send the obj to database\n\n    }\n    else{\n      //throw the error using toaster and with required fields\n      this.validateAllFormsFields(this.loginForm);\n    }\n  }\n\n  private validateAllFormsFields(formGroup: FormGroup){\n    Object.keys(formGroup.controls).forEach(field=>{\n      const control = formGroup.get(field);\n      if (control instanceof FormControl){\n        control.markAsDirty({onlySelf:true});\n      } else if(control instanceof FormGroup){\n        this.validateAllFormsFields(control)\n\n      }\n    })\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}